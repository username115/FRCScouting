/*
-----------------------------------------------------
StatsStructGen.py 1.1

This file was autogenerated with run cmd:
  "gen_scripts/StatsStructGen.py --packagename=org.frc836.database --classname=MatchStatsStruct --tablename=fact_match_data_2022 --infile=FRC_Scouting_Server/scouting.sql --outfile=app/src/main/java/org/frc836/database/MatchStatsStruct.java"

python version info:
  2.7.18 (default, Jul  1 2022, 12:27:04) 
[GCC 9.4.0]

Please take heed of modifying unnecessarily
-----------------------------------------------------
*/

package org.frc836.database;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import org.frc836.database.FRCScoutingContract.FACT_MATCH_DATA_2022_Entry;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.Date;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

public class MatchStatsStruct {


    public String event_id;
    public int team_id;
    public int match_id;
    public boolean practice_match;
    public String position_id;
    public boolean auto_taxi;
    public int auto_low_score;
    public int auto_low_miss;
    public int auto_high_score;
    public int auto_high_miss;
    public int low_score;
    public int low_miss;
    public int high_score;
    public int high_miss;
    public boolean hang_attempt;
    public int hang_level;
    public boolean ally_tarmac;
    public boolean ally_outfield;
    public boolean opp_tarmac;
    public boolean opp_outfield;
    public boolean fender_usage;
    public boolean launchpad_usage;
    public int time_to_hang_s;
    public boolean tech_foul;
    public boolean yellow_card;
    public boolean red_card;
    public String notes;
    

    public static final String TABLE_NAME = FACT_MATCH_DATA_2022_Entry.TABLE_NAME;
    public static final String COLUMN_NAME_ID = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_ID;
    public static final String COLUMN_NAME_EVENT_ID = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_EVENT_ID;
    public static final String COLUMN_NAME_TEAM_ID = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_TEAM_ID;
    public static final String COLUMN_NAME_MATCH_ID = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_MATCH_ID;
    public static final String COLUMN_NAME_PRACTICE_MATCH = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_PRACTICE_MATCH;
    public static final String COLUMN_NAME_POSITION_ID = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_POSITION_ID;
    public static final String COLUMN_NAME_AUTO_TAXI = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_AUTO_TAXI;
    public static final String COLUMN_NAME_AUTO_LOW_SCORE = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_AUTO_LOW_SCORE;
    public static final String COLUMN_NAME_AUTO_LOW_MISS = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_AUTO_LOW_MISS;
    public static final String COLUMN_NAME_AUTO_HIGH_SCORE = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_AUTO_HIGH_SCORE;
    public static final String COLUMN_NAME_AUTO_HIGH_MISS = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_AUTO_HIGH_MISS;
    public static final String COLUMN_NAME_LOW_SCORE = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_LOW_SCORE;
    public static final String COLUMN_NAME_LOW_MISS = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_LOW_MISS;
    public static final String COLUMN_NAME_HIGH_SCORE = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_HIGH_SCORE;
    public static final String COLUMN_NAME_HIGH_MISS = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_HIGH_MISS;
    public static final String COLUMN_NAME_HANG_ATTEMPT = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_HANG_ATTEMPT;
    public static final String COLUMN_NAME_HANG_LEVEL = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_HANG_LEVEL;
    public static final String COLUMN_NAME_ALLY_TARMAC = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_ALLY_TARMAC;
    public static final String COLUMN_NAME_ALLY_OUTFIELD = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_ALLY_OUTFIELD;
    public static final String COLUMN_NAME_OPP_TARMAC = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_OPP_TARMAC;
    public static final String COLUMN_NAME_OPP_OUTFIELD = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_OPP_OUTFIELD;
    public static final String COLUMN_NAME_FENDER_USAGE = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_FENDER_USAGE;
    public static final String COLUMN_NAME_LAUNCHPAD_USAGE = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_LAUNCHPAD_USAGE;
    public static final String COLUMN_NAME_TIME_TO_HANG_S = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_TIME_TO_HANG_S;
    public static final String COLUMN_NAME_TECH_FOUL = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_TECH_FOUL;
    public static final String COLUMN_NAME_YELLOW_CARD = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_YELLOW_CARD;
    public static final String COLUMN_NAME_RED_CARD = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_RED_CARD;
    public static final String COLUMN_NAME_NOTES = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_NOTES;
    public static final String COLUMN_NAME_INVALID = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_INVALID;
    public static final String COLUMN_NAME_TIMESTAMP = FACT_MATCH_DATA_2022_Entry.COLUMN_NAME_TIMESTAMP;
    

    public MatchStatsStruct() {
        init();
    }
    
    public void init() {
        event_id = "";
        team_id = 0;
        match_id = 0;
        practice_match = false;
        position_id = "Red 1";
        auto_taxi = false;
        auto_low_score = 0;
        auto_low_miss = 0;
        auto_high_score = 0;
        auto_high_miss = 0;
        low_score = 0;
        low_miss = 0;
        high_score = 0;
        high_miss = 0;
        hang_attempt = false;
        hang_level = 0;
        ally_tarmac = false;
        ally_outfield = false;
        opp_tarmac = false;
        opp_outfield = false;
        fender_usage = false;
        launchpad_usage = false;
        time_to_hang_s = 0;
        tech_foul = false;
        yellow_card = false;
        red_card = false;
        notes = "";
    }
    
    public MatchStatsStruct(int team, String event, int match) {
        init();
        this.team_id = team;
        this.event_id = event;
        this.match_id = match;
    }
    
    public MatchStatsStruct(int team, String event, int match, boolean practice) {
        init();
        this.team_id = team;
        this.event_id = event;
        this.match_id = match;
        this.practice_match = practice;
    }

    public ContentValues getValues(DB db, SQLiteDatabase database) {
        ContentValues vals = new ContentValues();
        long ev = db.getEventIDFromName(event_id, database);
        vals.put(COLUMN_NAME_ID, ev * 10000000 + match_id * 10000 + team_id);
        vals.put(COLUMN_NAME_EVENT_ID, ev);
        vals.put(COLUMN_NAME_TEAM_ID, team_id);
        vals.put(COLUMN_NAME_MATCH_ID, match_id);
        vals.put(COLUMN_NAME_PRACTICE_MATCH, practice_match ? 1 : 0);
        vals.put(COLUMN_NAME_POSITION_ID, db.getPosIDFromName(position_id, database));
        vals.put(COLUMN_NAME_AUTO_TAXI, auto_taxi ? 1 : 0);
        vals.put(COLUMN_NAME_AUTO_LOW_SCORE, auto_low_score);
        vals.put(COLUMN_NAME_AUTO_LOW_MISS, auto_low_miss);
        vals.put(COLUMN_NAME_AUTO_HIGH_SCORE, auto_high_score);
        vals.put(COLUMN_NAME_AUTO_HIGH_MISS, auto_high_miss);
        vals.put(COLUMN_NAME_LOW_SCORE, low_score);
        vals.put(COLUMN_NAME_LOW_MISS, low_miss);
        vals.put(COLUMN_NAME_HIGH_SCORE, high_score);
        vals.put(COLUMN_NAME_HIGH_MISS, high_miss);
        vals.put(COLUMN_NAME_HANG_ATTEMPT, hang_attempt ? 1 : 0);
        vals.put(COLUMN_NAME_HANG_LEVEL, hang_level);
        vals.put(COLUMN_NAME_ALLY_TARMAC, ally_tarmac ? 1 : 0);
        vals.put(COLUMN_NAME_ALLY_OUTFIELD, ally_outfield ? 1 : 0);
        vals.put(COLUMN_NAME_OPP_TARMAC, opp_tarmac ? 1 : 0);
        vals.put(COLUMN_NAME_OPP_OUTFIELD, opp_outfield ? 1 : 0);
        vals.put(COLUMN_NAME_FENDER_USAGE, fender_usage ? 1 : 0);
        vals.put(COLUMN_NAME_LAUNCHPAD_USAGE, launchpad_usage ? 1 : 0);
        vals.put(COLUMN_NAME_TIME_TO_HANG_S, time_to_hang_s);
        vals.put(COLUMN_NAME_TECH_FOUL, tech_foul ? 1 : 0);
        vals.put(COLUMN_NAME_YELLOW_CARD, yellow_card ? 1 : 0);
        vals.put(COLUMN_NAME_RED_CARD, red_card ? 1 : 0);
        vals.put(COLUMN_NAME_NOTES, notes);
        vals.put(COLUMN_NAME_INVALID, 1);
    
        return vals;
    }

    public void fromCursor(Cursor c, DB db, SQLiteDatabase database) {
        fromCursor(c, db, database, 0);
    }
    
    public void fromCursor(Cursor c, DB db, SQLiteDatabase database, int pos) {
        c.moveToPosition(pos);
        event_id = DB.getEventNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_EVENT_ID)), database);
        team_id = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_TEAM_ID));
        match_id = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_MATCH_ID));
        practice_match = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_PRACTICE_MATCH)) != 0;
        position_id = DB.getPosNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_POSITION_ID)), database);
        auto_taxi = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_TAXI)) != 0;
        auto_low_score = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_LOW_SCORE));
        auto_low_miss = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_LOW_MISS));
        auto_high_score = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_HIGH_SCORE));
        auto_high_miss = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_HIGH_MISS));
        low_score = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_LOW_SCORE));
        low_miss = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_LOW_MISS));
        high_score = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HIGH_SCORE));
        high_miss = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HIGH_MISS));
        hang_attempt = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HANG_ATTEMPT)) != 0;
        hang_level = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HANG_LEVEL));
        ally_tarmac = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_ALLY_TARMAC)) != 0;
        ally_outfield = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_ALLY_OUTFIELD)) != 0;
        opp_tarmac = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_OPP_TARMAC)) != 0;
        opp_outfield = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_OPP_OUTFIELD)) != 0;
        fender_usage = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_FENDER_USAGE)) != 0;
        launchpad_usage = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_LAUNCHPAD_USAGE)) != 0;
        time_to_hang_s = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_TIME_TO_HANG_S));
        tech_foul = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_TECH_FOUL)) != 0;
        yellow_card = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_YELLOW_CARD)) != 0;
        red_card = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_RED_CARD)) != 0;
        notes = c.getString(c.getColumnIndexOrThrow(COLUMN_NAME_NOTES));
    }

    public String[] getProjection() {
        List<String> temp = new ArrayList<String>(27);
        temp.add(COLUMN_NAME_EVENT_ID);
        temp.add(COLUMN_NAME_TEAM_ID);
        temp.add(COLUMN_NAME_MATCH_ID);
        temp.add(COLUMN_NAME_PRACTICE_MATCH);
        temp.add(COLUMN_NAME_POSITION_ID);
        temp.add(COLUMN_NAME_AUTO_TAXI);
        temp.add(COLUMN_NAME_AUTO_LOW_SCORE);
        temp.add(COLUMN_NAME_AUTO_LOW_MISS);
        temp.add(COLUMN_NAME_AUTO_HIGH_SCORE);
        temp.add(COLUMN_NAME_AUTO_HIGH_MISS);
        temp.add(COLUMN_NAME_LOW_SCORE);
        temp.add(COLUMN_NAME_LOW_MISS);
        temp.add(COLUMN_NAME_HIGH_SCORE);
        temp.add(COLUMN_NAME_HIGH_MISS);
        temp.add(COLUMN_NAME_HANG_ATTEMPT);
        temp.add(COLUMN_NAME_HANG_LEVEL);
        temp.add(COLUMN_NAME_ALLY_TARMAC);
        temp.add(COLUMN_NAME_ALLY_OUTFIELD);
        temp.add(COLUMN_NAME_OPP_TARMAC);
        temp.add(COLUMN_NAME_OPP_OUTFIELD);
        temp.add(COLUMN_NAME_FENDER_USAGE);
        temp.add(COLUMN_NAME_LAUNCHPAD_USAGE);
        temp.add(COLUMN_NAME_TIME_TO_HANG_S);
        temp.add(COLUMN_NAME_TECH_FOUL);
        temp.add(COLUMN_NAME_YELLOW_CARD);
        temp.add(COLUMN_NAME_RED_CARD);
        temp.add(COLUMN_NAME_NOTES);
        String[] projection = new String[temp.size()];
        return temp.toArray(projection);
    }

    public boolean isTextField(String column_name) {
        if (COLUMN_NAME_NOTES.equalsIgnoreCase(column_name)) return true;
    
        return false;
    }

    public boolean needsConvertedToText(String column_name) {
        if (COLUMN_NAME_EVENT_ID.equalsIgnoreCase(column_name)) return true;
    
        if (COLUMN_NAME_POSITION_ID.equalsIgnoreCase(column_name)) return true;
    
        return false;
    }

    public ContentValues jsonToCV(JSONObject json) throws JSONException {
        ContentValues vals = new ContentValues();
        vals.put(COLUMN_NAME_ID, json.has(COLUMN_NAME_ID) ? json.getInt(COLUMN_NAME_ID) : 0);
        vals.put(COLUMN_NAME_EVENT_ID, json.has(COLUMN_NAME_EVENT_ID) ? json.getInt(COLUMN_NAME_EVENT_ID) : 0);
        vals.put(COLUMN_NAME_TEAM_ID, json.has(COLUMN_NAME_TEAM_ID) ? json.getInt(COLUMN_NAME_TEAM_ID) : 0);
        vals.put(COLUMN_NAME_MATCH_ID, json.has(COLUMN_NAME_MATCH_ID) ? json.getInt(COLUMN_NAME_MATCH_ID) : 0);
        vals.put(COLUMN_NAME_PRACTICE_MATCH, json.has(COLUMN_NAME_PRACTICE_MATCH) ? json.getInt(COLUMN_NAME_PRACTICE_MATCH) : 0);
        vals.put(COLUMN_NAME_POSITION_ID, json.has(COLUMN_NAME_POSITION_ID) ? json.getInt(COLUMN_NAME_POSITION_ID) : 0);
        vals.put(COLUMN_NAME_AUTO_TAXI, json.has(COLUMN_NAME_AUTO_TAXI) ? json.getInt(COLUMN_NAME_AUTO_TAXI) : 0);
        vals.put(COLUMN_NAME_AUTO_LOW_SCORE, json.has(COLUMN_NAME_AUTO_LOW_SCORE) ? json.getInt(COLUMN_NAME_AUTO_LOW_SCORE) : 0);
        vals.put(COLUMN_NAME_AUTO_LOW_MISS, json.has(COLUMN_NAME_AUTO_LOW_MISS) ? json.getInt(COLUMN_NAME_AUTO_LOW_MISS) : 0);
        vals.put(COLUMN_NAME_AUTO_HIGH_SCORE, json.has(COLUMN_NAME_AUTO_HIGH_SCORE) ? json.getInt(COLUMN_NAME_AUTO_HIGH_SCORE) : 0);
        vals.put(COLUMN_NAME_AUTO_HIGH_MISS, json.has(COLUMN_NAME_AUTO_HIGH_MISS) ? json.getInt(COLUMN_NAME_AUTO_HIGH_MISS) : 0);
        vals.put(COLUMN_NAME_LOW_SCORE, json.has(COLUMN_NAME_LOW_SCORE) ? json.getInt(COLUMN_NAME_LOW_SCORE) : 0);
        vals.put(COLUMN_NAME_LOW_MISS, json.has(COLUMN_NAME_LOW_MISS) ? json.getInt(COLUMN_NAME_LOW_MISS) : 0);
        vals.put(COLUMN_NAME_HIGH_SCORE, json.has(COLUMN_NAME_HIGH_SCORE) ? json.getInt(COLUMN_NAME_HIGH_SCORE) : 0);
        vals.put(COLUMN_NAME_HIGH_MISS, json.has(COLUMN_NAME_HIGH_MISS) ? json.getInt(COLUMN_NAME_HIGH_MISS) : 0);
        vals.put(COLUMN_NAME_HANG_ATTEMPT, json.has(COLUMN_NAME_HANG_ATTEMPT) ? json.getInt(COLUMN_NAME_HANG_ATTEMPT) : 0);
        vals.put(COLUMN_NAME_HANG_LEVEL, json.has(COLUMN_NAME_HANG_LEVEL) ? json.getInt(COLUMN_NAME_HANG_LEVEL) : 0);
        vals.put(COLUMN_NAME_ALLY_TARMAC, json.has(COLUMN_NAME_ALLY_TARMAC) ? json.getInt(COLUMN_NAME_ALLY_TARMAC) : 0);
        vals.put(COLUMN_NAME_ALLY_OUTFIELD, json.has(COLUMN_NAME_ALLY_OUTFIELD) ? json.getInt(COLUMN_NAME_ALLY_OUTFIELD) : 0);
        vals.put(COLUMN_NAME_OPP_TARMAC, json.has(COLUMN_NAME_OPP_TARMAC) ? json.getInt(COLUMN_NAME_OPP_TARMAC) : 0);
        vals.put(COLUMN_NAME_OPP_OUTFIELD, json.has(COLUMN_NAME_OPP_OUTFIELD) ? json.getInt(COLUMN_NAME_OPP_OUTFIELD) : 0);
        vals.put(COLUMN_NAME_FENDER_USAGE, json.has(COLUMN_NAME_FENDER_USAGE) ? json.getInt(COLUMN_NAME_FENDER_USAGE) : 0);
        vals.put(COLUMN_NAME_LAUNCHPAD_USAGE, json.has(COLUMN_NAME_LAUNCHPAD_USAGE) ? json.getInt(COLUMN_NAME_LAUNCHPAD_USAGE) : 0);
        vals.put(COLUMN_NAME_TIME_TO_HANG_S, json.has(COLUMN_NAME_TIME_TO_HANG_S) ? json.getInt(COLUMN_NAME_TIME_TO_HANG_S) : 0);
        vals.put(COLUMN_NAME_TECH_FOUL, json.has(COLUMN_NAME_TECH_FOUL) ? json.getInt(COLUMN_NAME_TECH_FOUL) : 0);
        vals.put(COLUMN_NAME_YELLOW_CARD, json.has(COLUMN_NAME_YELLOW_CARD) ? json.getInt(COLUMN_NAME_YELLOW_CARD) : 0);
        vals.put(COLUMN_NAME_RED_CARD, json.has(COLUMN_NAME_RED_CARD) ? json.getInt(COLUMN_NAME_RED_CARD) : 0);
        vals.put(COLUMN_NAME_NOTES, json.has(COLUMN_NAME_NOTES) ? json.getString(COLUMN_NAME_NOTES) : "");
        vals.put(COLUMN_NAME_INVALID, 0);
        vals.put(COLUMN_NAME_TIMESTAMP, DB.dateParser.format(new Date(json.getLong(COLUMN_NAME_TIMESTAMP) * 1000)));
        return vals;
    }

    public LinkedHashMap<String,String> getDisplayData() {
        LinkedHashMap<String,String> vals = new LinkedHashMap<String,String>();
        vals.put( COLUMN_NAME_EVENT_ID, event_id);
        vals.put( COLUMN_NAME_TEAM_ID, String.valueOf(team_id));
        vals.put( COLUMN_NAME_MATCH_ID, String.valueOf(match_id));
        vals.put( COLUMN_NAME_PRACTICE_MATCH, String.valueOf(practice_match ? 1 : 0));
        vals.put( COLUMN_NAME_POSITION_ID, position_id);
        vals.put( COLUMN_NAME_AUTO_TAXI, String.valueOf(auto_taxi ? 1 : 0));
        vals.put( COLUMN_NAME_AUTO_LOW_SCORE, String.valueOf(auto_low_score));
        vals.put( COLUMN_NAME_AUTO_LOW_MISS, String.valueOf(auto_low_miss));
        vals.put( COLUMN_NAME_AUTO_HIGH_SCORE, String.valueOf(auto_high_score));
        vals.put( COLUMN_NAME_AUTO_HIGH_MISS, String.valueOf(auto_high_miss));
        vals.put( COLUMN_NAME_LOW_SCORE, String.valueOf(low_score));
        vals.put( COLUMN_NAME_LOW_MISS, String.valueOf(low_miss));
        vals.put( COLUMN_NAME_HIGH_SCORE, String.valueOf(high_score));
        vals.put( COLUMN_NAME_HIGH_MISS, String.valueOf(high_miss));
        vals.put( COLUMN_NAME_HANG_ATTEMPT, String.valueOf(hang_attempt ? 1 : 0));
        vals.put( COLUMN_NAME_HANG_LEVEL, String.valueOf(hang_level));
        vals.put( COLUMN_NAME_ALLY_TARMAC, String.valueOf(ally_tarmac ? 1 : 0));
        vals.put( COLUMN_NAME_ALLY_OUTFIELD, String.valueOf(ally_outfield ? 1 : 0));
        vals.put( COLUMN_NAME_OPP_TARMAC, String.valueOf(opp_tarmac ? 1 : 0));
        vals.put( COLUMN_NAME_OPP_OUTFIELD, String.valueOf(opp_outfield ? 1 : 0));
        vals.put( COLUMN_NAME_FENDER_USAGE, String.valueOf(fender_usage ? 1 : 0));
        vals.put( COLUMN_NAME_LAUNCHPAD_USAGE, String.valueOf(launchpad_usage ? 1 : 0));
        vals.put( COLUMN_NAME_TIME_TO_HANG_S, String.valueOf(time_to_hang_s));
        vals.put( COLUMN_NAME_TECH_FOUL, String.valueOf(tech_foul ? 1 : 0));
        vals.put( COLUMN_NAME_YELLOW_CARD, String.valueOf(yellow_card ? 1 : 0));
        vals.put( COLUMN_NAME_RED_CARD, String.valueOf(red_card ? 1 : 0));
        vals.put( COLUMN_NAME_NOTES, notes);
        return vals;
    }

}