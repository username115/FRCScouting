/*
-----------------------------------------------------
StatsStructGen.py 1.1

This file was autogenerated with run cmd:
  "gen_scripts/StatsStructGen.py --packagename=org.frc836.database --classname=SuperScoutStats --tablename=superscout_data_2023 --infile=FRC_Scouting_Server/scouting.sql --outfile=app/src/main/java/org/frc836/database/SuperScoutStats.java"

python version info:
  3.10.6 (main, Nov 14 2022, 16:10:14) [GCC 11.3.0]

Please take heed of modifying unnecessarily
-----------------------------------------------------
*/

package org.frc836.database;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import org.frc836.database.FRCScoutingContract.SUPERSCOUT_DATA_2023_Entry;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.Date;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

public class SuperScoutStats {


    public String event_id;
    public int team_id;
    public int match_id;
    public boolean practice_match;
    public String position_id;
    public int offense_rank;
    public int defense_rank;
    public int driver_rank;
    public boolean caused_foul;
    public String notes;
    

    public static final String TABLE_NAME = SUPERSCOUT_DATA_2023_Entry.TABLE_NAME;
    public static final String COLUMN_NAME_ID = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_ID;
    public static final String COLUMN_NAME_EVENT_ID = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_EVENT_ID;
    public static final String COLUMN_NAME_TEAM_ID = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_TEAM_ID;
    public static final String COLUMN_NAME_MATCH_ID = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_MATCH_ID;
    public static final String COLUMN_NAME_PRACTICE_MATCH = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_PRACTICE_MATCH;
    public static final String COLUMN_NAME_POSITION_ID = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_POSITION_ID;
    public static final String COLUMN_NAME_OFFENSE_RANK = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_OFFENSE_RANK;
    public static final String COLUMN_NAME_DEFENSE_RANK = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_DEFENSE_RANK;
    public static final String COLUMN_NAME_DRIVER_RANK = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_DRIVER_RANK;
    public static final String COLUMN_NAME_CAUSED_FOUL = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_CAUSED_FOUL;
    public static final String COLUMN_NAME_NOTES = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_NOTES;
    public static final String COLUMN_NAME_INVALID = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_INVALID;
    public static final String COLUMN_NAME_TIMESTAMP = SUPERSCOUT_DATA_2023_Entry.COLUMN_NAME_TIMESTAMP;
    

    public SuperScoutStats() {
        init();
    }
    
    public void init() {
        event_id = "";
        team_id = 0;
        match_id = 0;
        practice_match = false;
        position_id = "Red 1";
        offense_rank = 0;
        defense_rank = 0;
        driver_rank = 0;
        caused_foul = false;
        notes = "";
    }
    
    public SuperScoutStats(int team, String event, int match) {
        init();
        this.team_id = team;
        this.event_id = event;
        this.match_id = match;
    }
    
    public SuperScoutStats(int team, String event, int match, boolean practice) {
        init();
        this.team_id = team;
        this.event_id = event;
        this.match_id = match;
        this.practice_match = practice;
    }

    public void copyFrom(SuperScoutStats other) {
        this.event_id = other.event_id;
        this.team_id = other.team_id;
        this.match_id = other.match_id;
        this.practice_match = other.practice_match;
        this.position_id = other.position_id;
        this.offense_rank = other.offense_rank;
        this.defense_rank = other.defense_rank;
        this.driver_rank = other.driver_rank;
        this.caused_foul = other.caused_foul;
        this.notes = other.notes;
    
    }

    public ContentValues getValues(DB db, SQLiteDatabase database) {
        ContentValues vals = new ContentValues();
        long ev = db.getEventIDFromName(event_id, database);
        vals.put(COLUMN_NAME_ID, ev * 10000000 + match_id * 10000 + team_id);
        vals.put(COLUMN_NAME_EVENT_ID, ev);
        vals.put(COLUMN_NAME_TEAM_ID, team_id);
        vals.put(COLUMN_NAME_MATCH_ID, match_id);
        vals.put(COLUMN_NAME_PRACTICE_MATCH, practice_match ? 1 : 0);
        vals.put(COLUMN_NAME_POSITION_ID, db.getPosIDFromName(position_id, database));
        vals.put(COLUMN_NAME_OFFENSE_RANK, offense_rank);
        vals.put(COLUMN_NAME_DEFENSE_RANK, defense_rank);
        vals.put(COLUMN_NAME_DRIVER_RANK, driver_rank);
        vals.put(COLUMN_NAME_CAUSED_FOUL, caused_foul ? 1 : 0);
        vals.put(COLUMN_NAME_NOTES, notes);
        vals.put(COLUMN_NAME_INVALID, 1);
    
        return vals;
    }

    public void fromCursor(Cursor c, DB db, SQLiteDatabase database) {
        fromCursor(c, db, database, 0);
    }
    
    public void fromCursor(Cursor c, DB db, SQLiteDatabase database, int pos) {
        c.moveToPosition(pos);
        event_id = DB.getEventNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_EVENT_ID)), database);
        team_id = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_TEAM_ID));
        match_id = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_MATCH_ID));
        practice_match = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_PRACTICE_MATCH)) != 0;
        position_id = DB.getPosNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_POSITION_ID)), database);
        offense_rank = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_OFFENSE_RANK));
        defense_rank = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_DEFENSE_RANK));
        driver_rank = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_DRIVER_RANK));
        caused_foul = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_CAUSED_FOUL)) != 0;
        notes = c.getString(c.getColumnIndexOrThrow(COLUMN_NAME_NOTES));
    }

    public String[] getProjection() {
        List<String> temp = new ArrayList<String>(10);
        temp.add(COLUMN_NAME_EVENT_ID);
        temp.add(COLUMN_NAME_TEAM_ID);
        temp.add(COLUMN_NAME_MATCH_ID);
        temp.add(COLUMN_NAME_PRACTICE_MATCH);
        temp.add(COLUMN_NAME_POSITION_ID);
        temp.add(COLUMN_NAME_OFFENSE_RANK);
        temp.add(COLUMN_NAME_DEFENSE_RANK);
        temp.add(COLUMN_NAME_DRIVER_RANK);
        temp.add(COLUMN_NAME_CAUSED_FOUL);
        temp.add(COLUMN_NAME_NOTES);
        String[] projection = new String[temp.size()];
        return temp.toArray(projection);
    }

    public boolean isTextField(String column_name) {
        if (COLUMN_NAME_NOTES.equalsIgnoreCase(column_name)) return true;
    
        return false;
    }

    public boolean needsConvertedToText(String column_name) {
        if (COLUMN_NAME_EVENT_ID.equalsIgnoreCase(column_name)) return true;
    
        if (COLUMN_NAME_POSITION_ID.equalsIgnoreCase(column_name)) return true;
    
        return false;
    }

    public ContentValues jsonToCV(JSONObject json) throws JSONException {
        ContentValues vals = new ContentValues();
        vals.put(COLUMN_NAME_ID, json.has(COLUMN_NAME_ID) ? json.getInt(COLUMN_NAME_ID) : 0);
        vals.put(COLUMN_NAME_EVENT_ID, json.has(COLUMN_NAME_EVENT_ID) ? json.getInt(COLUMN_NAME_EVENT_ID) : 0);
        vals.put(COLUMN_NAME_TEAM_ID, json.has(COLUMN_NAME_TEAM_ID) ? json.getInt(COLUMN_NAME_TEAM_ID) : 0);
        vals.put(COLUMN_NAME_MATCH_ID, json.has(COLUMN_NAME_MATCH_ID) ? json.getInt(COLUMN_NAME_MATCH_ID) : 0);
        vals.put(COLUMN_NAME_PRACTICE_MATCH, json.has(COLUMN_NAME_PRACTICE_MATCH) ? json.getInt(COLUMN_NAME_PRACTICE_MATCH) : 0);
        vals.put(COLUMN_NAME_POSITION_ID, json.has(COLUMN_NAME_POSITION_ID) ? json.getInt(COLUMN_NAME_POSITION_ID) : 0);
        vals.put(COLUMN_NAME_OFFENSE_RANK, json.has(COLUMN_NAME_OFFENSE_RANK) ? json.getInt(COLUMN_NAME_OFFENSE_RANK) : 0);
        vals.put(COLUMN_NAME_DEFENSE_RANK, json.has(COLUMN_NAME_DEFENSE_RANK) ? json.getInt(COLUMN_NAME_DEFENSE_RANK) : 0);
        vals.put(COLUMN_NAME_DRIVER_RANK, json.has(COLUMN_NAME_DRIVER_RANK) ? json.getInt(COLUMN_NAME_DRIVER_RANK) : 0);
        vals.put(COLUMN_NAME_CAUSED_FOUL, json.has(COLUMN_NAME_CAUSED_FOUL) ? json.getInt(COLUMN_NAME_CAUSED_FOUL) : 0);
        vals.put(COLUMN_NAME_NOTES, json.has(COLUMN_NAME_NOTES) ? json.getString(COLUMN_NAME_NOTES) : "");
        vals.put(COLUMN_NAME_INVALID, 0);
        vals.put(COLUMN_NAME_TIMESTAMP, DB.dateParser.format(new Date(json.getLong(COLUMN_NAME_TIMESTAMP) * 1000)));
        return vals;
    }

    public LinkedHashMap<String,String> getDisplayData() {
        LinkedHashMap<String,String> vals = new LinkedHashMap<String,String>();
        vals.put( COLUMN_NAME_EVENT_ID, event_id);
        vals.put( COLUMN_NAME_TEAM_ID, String.valueOf(team_id));
        vals.put( COLUMN_NAME_MATCH_ID, String.valueOf(match_id));
        vals.put( COLUMN_NAME_PRACTICE_MATCH, String.valueOf(practice_match ? 1 : 0));
        vals.put( COLUMN_NAME_POSITION_ID, position_id);
        vals.put( COLUMN_NAME_OFFENSE_RANK, String.valueOf(offense_rank));
        vals.put( COLUMN_NAME_DEFENSE_RANK, String.valueOf(defense_rank));
        vals.put( COLUMN_NAME_DRIVER_RANK, String.valueOf(driver_rank));
        vals.put( COLUMN_NAME_CAUSED_FOUL, String.valueOf(caused_foul ? 1 : 0));
        vals.put( COLUMN_NAME_NOTES, notes);
        return vals;
    }

}